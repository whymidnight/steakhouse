// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package smart_wallet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SetOwners is the `setOwners` instruction.
type SetOwners struct {
	Owners *[]ag_solanago.PublicKey

	// [0] = [WRITE, SIGNER] smartWallet
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewSetOwnersInstructionBuilder creates a new `SetOwners` instruction builder.
func NewSetOwnersInstructionBuilder() *SetOwners {
	nd := &SetOwners{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 1),
	}
	return nd
}

// SetOwners sets the "owners" parameter.
func (inst *SetOwners) SetOwners(owners []ag_solanago.PublicKey) *SetOwners {
	inst.Owners = &owners
	return inst
}

// SetSmartWalletAccount sets the "smartWallet" account.
func (inst *SetOwners) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *SetOwners {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(smartWallet).WRITE().SIGNER()
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
func (inst *SetOwners) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

func (inst SetOwners) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SetOwners,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SetOwners) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SetOwners) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Owners == nil {
			return errors.New("Owners parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
	}
	return nil
}

func (inst *SetOwners) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SetOwners")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Owners", *inst.Owners))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=1]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("smartWallet", inst.AccountMetaSlice[0]))
					})
				})
		})
}

func (obj SetOwners) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Owners` param:
	err = encoder.Encode(obj.Owners)
	if err != nil {
		return err
	}
	return nil
}
func (obj *SetOwners) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Owners`:
	err = decoder.Decode(&obj.Owners)
	if err != nil {
		return err
	}
	return nil
}

// NewSetOwnersInstruction declares a new SetOwners instruction with the provided parameters and accounts.
func NewSetOwnersInstruction(
	// Parameters:
	owners []ag_solanago.PublicKey,
	// Accounts:
	smartWallet ag_solanago.PublicKey) *SetOwners {
	return NewSetOwnersInstructionBuilder().
		SetOwners(owners).
		SetSmartWalletAccount(smartWallet)
}
