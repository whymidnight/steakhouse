// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package smart_wallet

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type SmartWallet struct {
	Base            ag_solanago.PublicKey
	Bump            uint8
	Threshold       uint64
	MinimumDelay    int64
	GracePeriod     int64
	OwnerSetSeqno   uint32
	NumTransactions uint64
	Owners          []ag_solanago.PublicKey
	Reserved        [16]uint64
}

var SmartWalletDiscriminator = [8]byte{67, 59, 220, 179, 41, 10, 60, 177}

func (obj SmartWallet) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(SmartWalletDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Base` param:
	err = encoder.Encode(obj.Base)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Threshold` param:
	err = encoder.Encode(obj.Threshold)
	if err != nil {
		return err
	}
	// Serialize `MinimumDelay` param:
	err = encoder.Encode(obj.MinimumDelay)
	if err != nil {
		return err
	}
	// Serialize `GracePeriod` param:
	err = encoder.Encode(obj.GracePeriod)
	if err != nil {
		return err
	}
	// Serialize `OwnerSetSeqno` param:
	err = encoder.Encode(obj.OwnerSetSeqno)
	if err != nil {
		return err
	}
	// Serialize `NumTransactions` param:
	err = encoder.Encode(obj.NumTransactions)
	if err != nil {
		return err
	}
	// Serialize `Owners` param:
	err = encoder.Encode(obj.Owners)
	if err != nil {
		return err
	}
	// Serialize `Reserved` param:
	err = encoder.Encode(obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

func (obj *SmartWallet) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(SmartWalletDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[67 59 220 179 41 10 60 177]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Base`:
	err = decoder.Decode(&obj.Base)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Threshold`:
	err = decoder.Decode(&obj.Threshold)
	if err != nil {
		return err
	}
	// Deserialize `MinimumDelay`:
	err = decoder.Decode(&obj.MinimumDelay)
	if err != nil {
		return err
	}
	// Deserialize `GracePeriod`:
	err = decoder.Decode(&obj.GracePeriod)
	if err != nil {
		return err
	}
	// Deserialize `OwnerSetSeqno`:
	err = decoder.Decode(&obj.OwnerSetSeqno)
	if err != nil {
		return err
	}
	// Deserialize `NumTransactions`:
	err = decoder.Decode(&obj.NumTransactions)
	if err != nil {
		return err
	}
	// Deserialize `Owners`:
	err = decoder.Decode(&obj.Owners)
	if err != nil {
		return err
	}
	// Deserialize `Reserved`:
	err = decoder.Decode(&obj.Reserved)
	if err != nil {
		return err
	}
	return nil
}

type Transaction struct {
	SmartWallet   ag_solanago.PublicKey
	Index         uint64
	Bump          uint8
	Proposer      ag_solanago.PublicKey
	Instructions  []TXInstruction
	Signers       []bool
	OwnerSetSeqno uint32
	Eta           int64
	Executor      ag_solanago.PublicKey
	ExecutedAt    int64
}

var TransactionDiscriminator = [8]byte{11, 24, 174, 129, 203, 117, 242, 23}

func (obj Transaction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TransactionDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `SmartWallet` param:
	err = encoder.Encode(obj.SmartWallet)
	if err != nil {
		return err
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `Proposer` param:
	err = encoder.Encode(obj.Proposer)
	if err != nil {
		return err
	}
	// Serialize `Instructions` param:
	err = encoder.Encode(obj.Instructions)
	if err != nil {
		return err
	}
	// Serialize `Signers` param:
	err = encoder.Encode(obj.Signers)
	if err != nil {
		return err
	}
	// Serialize `OwnerSetSeqno` param:
	err = encoder.Encode(obj.OwnerSetSeqno)
	if err != nil {
		return err
	}
	// Serialize `Eta` param:
	err = encoder.Encode(obj.Eta)
	if err != nil {
		return err
	}
	// Serialize `Executor` param:
	err = encoder.Encode(obj.Executor)
	if err != nil {
		return err
	}
	// Serialize `ExecutedAt` param:
	err = encoder.Encode(obj.ExecutedAt)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Transaction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TransactionDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[11 24 174 129 203 117 242 23]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `SmartWallet`:
	err = decoder.Decode(&obj.SmartWallet)
	if err != nil {
		return err
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `Proposer`:
	err = decoder.Decode(&obj.Proposer)
	if err != nil {
		return err
	}
	// Deserialize `Instructions`:
	err = decoder.Decode(&obj.Instructions)
	if err != nil {
		return err
	}
	// Deserialize `Signers`:
	err = decoder.Decode(&obj.Signers)
	if err != nil {
		return err
	}
	// Deserialize `OwnerSetSeqno`:
	err = decoder.Decode(&obj.OwnerSetSeqno)
	if err != nil {
		return err
	}
	// Deserialize `Eta`:
	err = decoder.Decode(&obj.Eta)
	if err != nil {
		return err
	}
	// Deserialize `Executor`:
	err = decoder.Decode(&obj.Executor)
	if err != nil {
		return err
	}
	// Deserialize `ExecutedAt`:
	err = decoder.Decode(&obj.ExecutedAt)
	if err != nil {
		return err
	}
	return nil
}
