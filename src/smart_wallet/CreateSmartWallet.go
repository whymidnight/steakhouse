// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package smart_wallet

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateSmartWallet is the `createSmartWallet` instruction.
type CreateSmartWallet struct {
	Bump         *uint8
	MaxOwners    *uint8
	Owners       *[]ag_solanago.PublicKey
	Threshold    *uint64
	MinimumDelay *int64

	// [0] = [SIGNER] base
	//
	// [1] = [WRITE] smartWallet
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewCreateSmartWalletInstructionBuilder creates a new `CreateSmartWallet` instruction builder.
func NewCreateSmartWalletInstructionBuilder() *CreateSmartWallet {
	nd := &CreateSmartWallet{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetBump sets the "bump" parameter.
func (inst *CreateSmartWallet) SetBump(bump uint8) *CreateSmartWallet {
	inst.Bump = &bump
	return inst
}

// SetMaxOwners sets the "maxOwners" parameter.
func (inst *CreateSmartWallet) SetMaxOwners(maxOwners uint8) *CreateSmartWallet {
	inst.MaxOwners = &maxOwners
	return inst
}

// SetOwners sets the "owners" parameter.
func (inst *CreateSmartWallet) SetOwners(owners []ag_solanago.PublicKey) *CreateSmartWallet {
	inst.Owners = &owners
	return inst
}

// SetThreshold sets the "threshold" parameter.
func (inst *CreateSmartWallet) SetThreshold(threshold uint64) *CreateSmartWallet {
	inst.Threshold = &threshold
	return inst
}

// SetMinimumDelay sets the "minimumDelay" parameter.
func (inst *CreateSmartWallet) SetMinimumDelay(minimumDelay int64) *CreateSmartWallet {
	inst.MinimumDelay = &minimumDelay
	return inst
}

// SetBaseAccount sets the "base" account.
func (inst *CreateSmartWallet) SetBaseAccount(base ag_solanago.PublicKey) *CreateSmartWallet {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(base).SIGNER()
	return inst
}

// GetBaseAccount gets the "base" account.
func (inst *CreateSmartWallet) GetBaseAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetSmartWalletAccount sets the "smartWallet" account.
func (inst *CreateSmartWallet) SetSmartWalletAccount(smartWallet ag_solanago.PublicKey) *CreateSmartWallet {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(smartWallet).WRITE()
	return inst
}

// GetSmartWalletAccount gets the "smartWallet" account.
func (inst *CreateSmartWallet) GetSmartWalletAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateSmartWallet) SetPayerAccount(payer ag_solanago.PublicKey) *CreateSmartWallet {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateSmartWallet) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateSmartWallet) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateSmartWallet {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateSmartWallet) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

func (inst CreateSmartWallet) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateSmartWallet,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateSmartWallet) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateSmartWallet) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Bump == nil {
			return errors.New("Bump parameter is not set")
		}
		if inst.MaxOwners == nil {
			return errors.New("MaxOwners parameter is not set")
		}
		if inst.Owners == nil {
			return errors.New("Owners parameter is not set")
		}
		if inst.Threshold == nil {
			return errors.New("Threshold parameter is not set")
		}
		if inst.MinimumDelay == nil {
			return errors.New("MinimumDelay parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Base is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.SmartWallet is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateSmartWallet) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateSmartWallet")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=5]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("        Bump", *inst.Bump))
						paramsBranch.Child(ag_format.Param("   MaxOwners", *inst.MaxOwners))
						paramsBranch.Child(ag_format.Param("      Owners", *inst.Owners))
						paramsBranch.Child(ag_format.Param("   Threshold", *inst.Threshold))
						paramsBranch.Child(ag_format.Param("MinimumDelay", *inst.MinimumDelay))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("         base", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("  smartWallet", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("        payer", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("systemProgram", inst.AccountMetaSlice[3]))
					})
				})
		})
}

func (obj CreateSmartWallet) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Bump` param:
	err = encoder.Encode(obj.Bump)
	if err != nil {
		return err
	}
	// Serialize `MaxOwners` param:
	err = encoder.Encode(obj.MaxOwners)
	if err != nil {
		return err
	}
	// Serialize `Owners` param:
	err = encoder.Encode(obj.Owners)
	if err != nil {
		return err
	}
	// Serialize `Threshold` param:
	err = encoder.Encode(obj.Threshold)
	if err != nil {
		return err
	}
	// Serialize `MinimumDelay` param:
	err = encoder.Encode(obj.MinimumDelay)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateSmartWallet) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Bump`:
	err = decoder.Decode(&obj.Bump)
	if err != nil {
		return err
	}
	// Deserialize `MaxOwners`:
	err = decoder.Decode(&obj.MaxOwners)
	if err != nil {
		return err
	}
	// Deserialize `Owners`:
	err = decoder.Decode(&obj.Owners)
	if err != nil {
		return err
	}
	// Deserialize `Threshold`:
	err = decoder.Decode(&obj.Threshold)
	if err != nil {
		return err
	}
	// Deserialize `MinimumDelay`:
	err = decoder.Decode(&obj.MinimumDelay)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateSmartWalletInstruction declares a new CreateSmartWallet instruction with the provided parameters and accounts.
func NewCreateSmartWalletInstruction(
	// Parameters:
	bump uint8,
	maxOwners uint8,
	owners []ag_solanago.PublicKey,
	threshold uint64,
	minimumDelay int64,
	// Accounts:
	base ag_solanago.PublicKey,
	smartWallet ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateSmartWallet {
	return NewCreateSmartWalletInstructionBuilder().
		SetBump(bump).
		SetMaxOwners(maxOwners).
		SetOwners(owners).
		SetThreshold(threshold).
		SetMinimumDelay(minimumDelay).
		SetBaseAccount(base).
		SetSmartWalletAccount(smartWallet).
		SetPayerAccount(payer).
		SetSystemProgramAccount(systemProgram)
}
