// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchor_escrow

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Exchange is the `exchange` instruction.
type Exchange struct {

	// [0] = [SIGNER] taker
	//
	// [1] = [WRITE] takerDepositTokenAccount
	//
	// [2] = [WRITE] takerReceiveTokenAccount
	//
	// [3] = [WRITE] initializerDepositTokenAccount
	//
	// [4] = [WRITE] initializerReceiveTokenAccount
	//
	// [5] = [WRITE] initializer
	//
	// [6] = [WRITE] escrowAccount
	//
	// [7] = [WRITE] vaultAccount
	//
	// [8] = [] vaultAuthority
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewExchangeInstructionBuilder creates a new `Exchange` instruction builder.
func NewExchangeInstructionBuilder() *Exchange {
	nd := &Exchange{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetTakerAccount sets the "taker" account.
func (inst *Exchange) SetTakerAccount(taker ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(taker).SIGNER()
	return inst
}

// GetTakerAccount gets the "taker" account.
func (inst *Exchange) GetTakerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetTakerDepositTokenAccountAccount sets the "takerDepositTokenAccount" account.
func (inst *Exchange) SetTakerDepositTokenAccountAccount(takerDepositTokenAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(takerDepositTokenAccount).WRITE()
	return inst
}

// GetTakerDepositTokenAccountAccount gets the "takerDepositTokenAccount" account.
func (inst *Exchange) GetTakerDepositTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetTakerReceiveTokenAccountAccount sets the "takerReceiveTokenAccount" account.
func (inst *Exchange) SetTakerReceiveTokenAccountAccount(takerReceiveTokenAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(takerReceiveTokenAccount).WRITE()
	return inst
}

// GetTakerReceiveTokenAccountAccount gets the "takerReceiveTokenAccount" account.
func (inst *Exchange) GetTakerReceiveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetInitializerDepositTokenAccountAccount sets the "initializerDepositTokenAccount" account.
func (inst *Exchange) SetInitializerDepositTokenAccountAccount(initializerDepositTokenAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(initializerDepositTokenAccount).WRITE()
	return inst
}

// GetInitializerDepositTokenAccountAccount gets the "initializerDepositTokenAccount" account.
func (inst *Exchange) GetInitializerDepositTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetInitializerReceiveTokenAccountAccount sets the "initializerReceiveTokenAccount" account.
func (inst *Exchange) SetInitializerReceiveTokenAccountAccount(initializerReceiveTokenAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(initializerReceiveTokenAccount).WRITE()
	return inst
}

// GetInitializerReceiveTokenAccountAccount gets the "initializerReceiveTokenAccount" account.
func (inst *Exchange) GetInitializerReceiveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetInitializerAccount sets the "initializer" account.
func (inst *Exchange) SetInitializerAccount(initializer ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(initializer).WRITE()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *Exchange) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetEscrowAccountAccount sets the "escrowAccount" account.
func (inst *Exchange) SetEscrowAccountAccount(escrowAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(escrowAccount).WRITE()
	return inst
}

// GetEscrowAccountAccount gets the "escrowAccount" account.
func (inst *Exchange) GetEscrowAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetVaultAccountAccount sets the "vaultAccount" account.
func (inst *Exchange) SetVaultAccountAccount(vaultAccount ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(vaultAccount).WRITE()
	return inst
}

// GetVaultAccountAccount gets the "vaultAccount" account.
func (inst *Exchange) GetVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetVaultAuthorityAccount sets the "vaultAuthority" account.
func (inst *Exchange) SetVaultAuthorityAccount(vaultAuthority ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(vaultAuthority)
	return inst
}

// GetVaultAuthorityAccount gets the "vaultAuthority" account.
func (inst *Exchange) GetVaultAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Exchange) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Exchange {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Exchange) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

func (inst Exchange) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Exchange,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Exchange) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Exchange) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Taker is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.TakerDepositTokenAccount is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TakerReceiveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.InitializerDepositTokenAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.InitializerReceiveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EscrowAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.VaultAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.VaultAuthority is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Exchange) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Exchange")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                  taker", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("      takerDepositToken", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("      takerReceiveToken", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("initializerDepositToken", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("initializerReceiveToken", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("            initializer", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("                 escrow", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("                  vault", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("         vaultAuthority", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice[9]))
					})
				})
		})
}

func (obj Exchange) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *Exchange) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewExchangeInstruction declares a new Exchange instruction with the provided parameters and accounts.
func NewExchangeInstruction(
	// Accounts:
	taker ag_solanago.PublicKey,
	takerDepositTokenAccount ag_solanago.PublicKey,
	takerReceiveTokenAccount ag_solanago.PublicKey,
	initializerDepositTokenAccount ag_solanago.PublicKey,
	initializerReceiveTokenAccount ag_solanago.PublicKey,
	initializer ag_solanago.PublicKey,
	escrowAccount ag_solanago.PublicKey,
	vaultAccount ag_solanago.PublicKey,
	vaultAuthority ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Exchange {
	return NewExchangeInstructionBuilder().
		SetTakerAccount(taker).
		SetTakerDepositTokenAccountAccount(takerDepositTokenAccount).
		SetTakerReceiveTokenAccountAccount(takerReceiveTokenAccount).
		SetInitializerDepositTokenAccountAccount(initializerDepositTokenAccount).
		SetInitializerReceiveTokenAccountAccount(initializerReceiveTokenAccount).
		SetInitializerAccount(initializer).
		SetEscrowAccountAccount(escrowAccount).
		SetVaultAccountAccount(vaultAccount).
		SetVaultAuthorityAccount(vaultAuthority).
		SetTokenProgramAccount(tokenProgram)
}
