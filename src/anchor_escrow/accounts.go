// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchor_escrow

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type Meta struct {
	RewardCampaign ag_solanago.PublicKey
	Owner          ag_solanago.PublicKey
	Nft            ag_solanago.PublicKey
}

var MetaDiscriminator = [8]byte{7, 115, 152, 83, 222, 207, 126, 180}

func (obj Meta) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MetaDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `RewardCampaign` param:
	err = encoder.Encode(obj.RewardCampaign)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Nft` param:
	err = encoder.Encode(obj.Nft)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Meta) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MetaDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[7 115 152 83 222 207 126 180]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `RewardCampaign`:
	err = decoder.Decode(&obj.RewardCampaign)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Nft`:
	err = decoder.Decode(&obj.Nft)
	if err != nil {
		return err
	}
	return nil
}

type EscrowAccount struct {
	InitializerKey                 ag_solanago.PublicKey
	InitializerDepositTokenAccount ag_solanago.PublicKey
	InitializerReceiveTokenAccount ag_solanago.PublicKey
	InitializerAmount              uint64
	TakerAmount                    uint64
}

var EscrowAccountDiscriminator = [8]byte{36, 69, 48, 18, 128, 225, 125, 135}

func (obj EscrowAccount) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(EscrowAccountDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `InitializerKey` param:
	err = encoder.Encode(obj.InitializerKey)
	if err != nil {
		return err
	}
	// Serialize `InitializerDepositTokenAccount` param:
	err = encoder.Encode(obj.InitializerDepositTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `InitializerReceiveTokenAccount` param:
	err = encoder.Encode(obj.InitializerReceiveTokenAccount)
	if err != nil {
		return err
	}
	// Serialize `InitializerAmount` param:
	err = encoder.Encode(obj.InitializerAmount)
	if err != nil {
		return err
	}
	// Serialize `TakerAmount` param:
	err = encoder.Encode(obj.TakerAmount)
	if err != nil {
		return err
	}
	return nil
}

func (obj *EscrowAccount) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(EscrowAccountDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[36 69 48 18 128 225 125 135]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `InitializerKey`:
	err = decoder.Decode(&obj.InitializerKey)
	if err != nil {
		return err
	}
	// Deserialize `InitializerDepositTokenAccount`:
	err = decoder.Decode(&obj.InitializerDepositTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `InitializerReceiveTokenAccount`:
	err = decoder.Decode(&obj.InitializerReceiveTokenAccount)
	if err != nil {
		return err
	}
	// Deserialize `InitializerAmount`:
	err = decoder.Decode(&obj.InitializerAmount)
	if err != nil {
		return err
	}
	// Deserialize `TakerAmount`:
	err = decoder.Decode(&obj.TakerAmount)
	if err != nil {
		return err
	}
	return nil
}
