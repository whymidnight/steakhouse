// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package anchor_escrow

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Initialize is the `initialize` instruction.
type Initialize struct {
	VaultAccountBump  *uint8
	InitializerAmount *uint64
	TakerAmount       *uint64

	// [0] = [WRITE] meta
	//
	// [1] = [WRITE, SIGNER] initializer
	//
	// [2] = [] mint
	//
	// [3] = [WRITE] vaultAccount
	//
	// [4] = [WRITE] initializerDepositTokenAccount
	//
	// [5] = [] initializerReceiveTokenAccount
	//
	// [6] = [WRITE] escrowAccount
	//
	// [7] = [] systemProgram
	//
	// [8] = [] rent
	//
	// [9] = [] tokenProgram
	ag_solanago.AccountMetaSlice `bin:"-" borsh_skip:"true"`
}

// NewInitializeInstructionBuilder creates a new `Initialize` instruction builder.
func NewInitializeInstructionBuilder() *Initialize {
	nd := &Initialize{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 10),
	}
	return nd
}

// SetVaultAccountBump sets the "vaultAccountBump" parameter.
func (inst *Initialize) SetVaultAccountBump(vaultAccountBump uint8) *Initialize {
	inst.VaultAccountBump = &vaultAccountBump
	return inst
}

// SetInitializerAmount sets the "initializerAmount" parameter.
func (inst *Initialize) SetInitializerAmount(initializerAmount uint64) *Initialize {
	inst.InitializerAmount = &initializerAmount
	return inst
}

// SetTakerAmount sets the "takerAmount" parameter.
func (inst *Initialize) SetTakerAmount(takerAmount uint64) *Initialize {
	inst.TakerAmount = &takerAmount
	return inst
}

// SetMetaAccount sets the "meta" account.
func (inst *Initialize) SetMetaAccount(meta ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(meta).WRITE()
	return inst
}

// GetMetaAccount gets the "meta" account.
func (inst *Initialize) GetMetaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[0]
}

// SetInitializerAccount sets the "initializer" account.
func (inst *Initialize) SetInitializerAccount(initializer ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(initializer).WRITE().SIGNER()
	return inst
}

// GetInitializerAccount gets the "initializer" account.
func (inst *Initialize) GetInitializerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[1]
}

// SetMintAccount sets the "mint" account.
func (inst *Initialize) SetMintAccount(mint ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *Initialize) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[2]
}

// SetVaultAccountAccount sets the "vaultAccount" account.
func (inst *Initialize) SetVaultAccountAccount(vaultAccount ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(vaultAccount).WRITE()
	return inst
}

// GetVaultAccountAccount gets the "vaultAccount" account.
func (inst *Initialize) GetVaultAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[3]
}

// SetInitializerDepositTokenAccountAccount sets the "initializerDepositTokenAccount" account.
func (inst *Initialize) SetInitializerDepositTokenAccountAccount(initializerDepositTokenAccount ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(initializerDepositTokenAccount).WRITE()
	return inst
}

// GetInitializerDepositTokenAccountAccount gets the "initializerDepositTokenAccount" account.
func (inst *Initialize) GetInitializerDepositTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[4]
}

// SetInitializerReceiveTokenAccountAccount sets the "initializerReceiveTokenAccount" account.
func (inst *Initialize) SetInitializerReceiveTokenAccountAccount(initializerReceiveTokenAccount ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(initializerReceiveTokenAccount)
	return inst
}

// GetInitializerReceiveTokenAccountAccount gets the "initializerReceiveTokenAccount" account.
func (inst *Initialize) GetInitializerReceiveTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[5]
}

// SetEscrowAccountAccount sets the "escrowAccount" account.
func (inst *Initialize) SetEscrowAccountAccount(escrowAccount ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(escrowAccount).WRITE()
	return inst
}

// GetEscrowAccountAccount gets the "escrowAccount" account.
func (inst *Initialize) GetEscrowAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[6]
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Initialize) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Initialize) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[7]
}

// SetRentAccount sets the "rent" account.
func (inst *Initialize) SetRentAccount(rent ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(rent)
	return inst
}

// GetRentAccount gets the "rent" account.
func (inst *Initialize) GetRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[8]
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Initialize) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Initialize {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Initialize) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice[9]
}

func (inst Initialize) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Initialize,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Initialize) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Initialize) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.VaultAccountBump == nil {
			return errors.New("VaultAccountBump parameter is not set")
		}
		if inst.InitializerAmount == nil {
			return errors.New("InitializerAmount parameter is not set")
		}
		if inst.TakerAmount == nil {
			return errors.New("TakerAmount parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Meta is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Initializer is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.VaultAccount is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.InitializerDepositTokenAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.InitializerReceiveTokenAccount is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.EscrowAccount is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.Rent is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
	}
	return nil
}

func (inst *Initialize) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Initialize")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param(" VaultAccountBump", *inst.VaultAccountBump))
						paramsBranch.Child(ag_format.Param("InitializerAmount", *inst.InitializerAmount))
						paramsBranch.Child(ag_format.Param("      TakerAmount", *inst.TakerAmount))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=10]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                   meta", inst.AccountMetaSlice[0]))
						accountsBranch.Child(ag_format.Meta("            initializer", inst.AccountMetaSlice[1]))
						accountsBranch.Child(ag_format.Meta("                   mint", inst.AccountMetaSlice[2]))
						accountsBranch.Child(ag_format.Meta("                  vault", inst.AccountMetaSlice[3]))
						accountsBranch.Child(ag_format.Meta("initializerDepositToken", inst.AccountMetaSlice[4]))
						accountsBranch.Child(ag_format.Meta("initializerReceiveToken", inst.AccountMetaSlice[5]))
						accountsBranch.Child(ag_format.Meta("                 escrow", inst.AccountMetaSlice[6]))
						accountsBranch.Child(ag_format.Meta("          systemProgram", inst.AccountMetaSlice[7]))
						accountsBranch.Child(ag_format.Meta("                   rent", inst.AccountMetaSlice[8]))
						accountsBranch.Child(ag_format.Meta("           tokenProgram", inst.AccountMetaSlice[9]))
					})
				})
		})
}

func (obj Initialize) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `VaultAccountBump` param:
	err = encoder.Encode(obj.VaultAccountBump)
	if err != nil {
		return err
	}
	// Serialize `InitializerAmount` param:
	err = encoder.Encode(obj.InitializerAmount)
	if err != nil {
		return err
	}
	// Serialize `TakerAmount` param:
	err = encoder.Encode(obj.TakerAmount)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Initialize) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `VaultAccountBump`:
	err = decoder.Decode(&obj.VaultAccountBump)
	if err != nil {
		return err
	}
	// Deserialize `InitializerAmount`:
	err = decoder.Decode(&obj.InitializerAmount)
	if err != nil {
		return err
	}
	// Deserialize `TakerAmount`:
	err = decoder.Decode(&obj.TakerAmount)
	if err != nil {
		return err
	}
	return nil
}

// NewInitializeInstruction declares a new Initialize instruction with the provided parameters and accounts.
func NewInitializeInstruction(
	// Parameters:
	vaultAccountBump uint8,
	initializerAmount uint64,
	takerAmount uint64,
	// Accounts:
	meta ag_solanago.PublicKey,
	initializer ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	vaultAccount ag_solanago.PublicKey,
	initializerDepositTokenAccount ag_solanago.PublicKey,
	initializerReceiveTokenAccount ag_solanago.PublicKey,
	escrowAccount ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	rent ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey) *Initialize {
	return NewInitializeInstructionBuilder().
		SetVaultAccountBump(vaultAccountBump).
		SetInitializerAmount(initializerAmount).
		SetTakerAmount(takerAmount).
		SetMetaAccount(meta).
		SetInitializerAccount(initializer).
		SetMintAccount(mint).
		SetVaultAccountAccount(vaultAccount).
		SetInitializerDepositTokenAccountAccount(initializerDepositTokenAccount).
		SetInitializerReceiveTokenAccountAccount(initializerReceiveTokenAccount).
		SetEscrowAccountAccount(escrowAccount).
		SetSystemProgramAccount(systemProgram).
		SetRentAccount(rent).
		SetTokenProgramAccount(tokenProgram)
}
